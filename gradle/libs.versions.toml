[versions]
apache-kafka = "3.5.0"
caffeine = "3.1.8"
dbrider = "1.41.0"
ehrda = "1.3.3"
guava = "32.1.2-jre"
interop-aidbox = "8.1.0"
interop-common = "3.11.0"
interop-datalake = "8.4.1"
interop-ehr = "11.0.0"
interop-event-internal = "1.1.0"
interop-event-request = "1.1.0"
interop-fhir = "8.9.1"
interop-gradle = "3.2.0"
interop-kafka = "8.4.0"
interop-publishers = "9.0.0"
interop-queue = "2.0.0"
interop-validation = "3.0.0"
jackson = "2.15.2"
jakarta = "3.1.0"
jersey = "3.1.3"
junit-pioneer = "2.1.0"
kotlin = "1.8.22"
ktor = "2.3.4"
ktorm = "3.6.0"
mockk = "1.13.7"
mockserver = "5.15.0"
mysql = "8.1.0"
okhttp3 = "4.11.0"
owasp = "8.4.0"
ronin-kafka = "1.1.1"
ronin-test = "0.2.0"
shadow = "8.1.1"
# @pin until can move to JDK 17
spring-boot = "2.7.13"
# @pin until Spring Boot 3
spring-vault = "2.3.2"
testcontainers = "1.19.0"
woodstox = "6.5.1"
xerces = "2.12.2"

[libraries]
caffeine = { module = "com.github.ben-manes.caffeine:caffeine", version.ref = "caffeine" }
ehr-data-authority-client = { module = "com.projectronin.ehr:ehr-data-authority-client", version.ref = "ehrda" }
event-interop-resource-internal = { module = "com.projectronin.contract.event:event-interop-resource-internal", version.ref = "interop-event-internal" }
event-interop-resource-request = { module = "com.projectronin.contract.event:event-interop-resource-request", version.ref = "interop-event-request" }
guava = { module = "com.google.guava:guava", version.ref = "guava" }
# aidbox just used for testing, should be removed eventually
interop-aidbox = { module = "com.projectronin.interop.publish:interop-aidbox", version.ref = "interop-aidbox" }
interop-common = { module = "com.projectronin.interop:interop-common", version.ref = "interop-common" }
interop-commonHttp = { module = "com.projectronin.interop:interop-common-http", version.ref = "interop-common" }
interop-commonJackson = { module = "com.projectronin.interop:interop-common-jackson", version.ref = "interop-common" }
interop-commonTestDb = { module = "com.projectronin.interop:interop-common-test-db", version.ref = "interop-common" }
interop-datalake = { module = "com.projectronin.interop.publish:interop-datalake", version.ref = "interop-datalake" }
interop-ehr-api = { module = "com.projectronin.interop.ehr:interop-ehr", version.ref = "interop-ehr" }
interop-ehr-cerner = { module = "com.projectronin.interop.ehr:interop-ehr-cerner", version.ref = "interop-ehr" }
interop-ehr-epic = { module = "com.projectronin.interop.ehr:interop-ehr-epic", version.ref = "interop-ehr" }
interop-ehr-fhir-ronin = { module = "com.projectronin.interop.ehr:interop-fhir-ronin", version.ref = "interop-ehr" }
interop-ehr-liquibase = { module = "com.projectronin.interop.ehr:interop-ehr-liquibase", version.ref = "interop-ehr" }
interop-ehr-tenant = { module = "com.projectronin.interop.ehr:interop-tenant", version.ref = "interop-ehr" }
interop-fhir = { module = "com.projectronin.interop.fhir:interop-fhir", version.ref = "interop-fhir" }
interop-fhirGenerators = { module = "com.projectronin.interop.fhir:interop-fhir-generators", version.ref = "interop-fhir" }
interop-kafka = { module = "com.projectronin.interop.publish:interop-kafka", version.ref = "interop-kafka" }
interop-publishers = { module = "com.projectronin.interop.publish:interop-publishers", version.ref = "interop-publishers" }
interop-queue-api = { module = "com.projectronin.interop.queue:interop-queue", version.ref = "interop-queue" }
interop-queue-db = { module = "com.projectronin.interop.queue:interop-queue-db", version.ref = "interop-queue" }
interop-queue-kafka = { module = "com.projectronin.interop.queue:interop-queue-kafka", version.ref = "interop-queue" }
interop-queue-liquibase = { module = "com.projectronin.interop.queue:interop-queue-liquibase", version.ref = "interop-queue" }
interop-validation-client = { module = "com.projectronin.interop.validation:interop-validation-client", version.ref = "interop-validation" }
jackson-annotations = { module = "com.fasterxml.jackson.core:jackson-annotations", version.ref = "jackson" }
jackson-core = { module = "com.fasterxml.jackson.core:jackson-core", version.ref = "jackson" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-dataformat-xml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-xml", version.ref = "jackson" }
jackson-dataformat-yaml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version.ref = "jackson" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jakarta-ws = { module = "jakarta.ws.rs:jakarta.ws.rs-api", version.ref = "jakarta" }
jersey-glassfish-client = { module = "org.glassfish.jersey.core:jersey-client", version.ref = "jersey" }
junit-pioneer = { module = "org.junit-pioneer:junit-pioneer", version.ref = "junit-pioneer" }
kafka-clients = { module = "org.apache.kafka:kafka-clients", version.ref = "apache-kafka" }
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-serialization-jackson = { module = "io.ktor:ktor-serialization-jackson", version.ref = "ktor" }
ktorm-core = { module = "org.ktorm:ktorm-core", version.ref = "ktorm" }
ktorm-support-mysql = { module = "org.ktorm:ktorm-support-mysql", version.ref = "ktorm" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
mockserver-client-java = { module = "org.mock-server:mockserver-client-java-no-dependencies", version.ref = "mockserver" }
mysql-connector-java = { module = "com.mysql:mysql-connector-j", version.ref = "mysql" }
okhttp3-mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okhttp3" }
rider-junit = { module = "com.github.database-rider:rider-junit5", version.ref = "dbrider" }
ronin-kafka = { module = "com.projectronin:ronin-kafka", version.ref = "ronin-kafka" }
ronin-test-data-generator = { module = "com.projectronin.test:ronin-test-data-generator", version.ref = "ronin-test" }
spring-boot-autoconfigure = { module = "org.springframework.boot:spring-boot-autoconfigure", version.ref = "spring-boot" }
spring-vault-core = { module = "org.springframework.vault:spring-vault-core", version.ref = "spring-vault" }
testcontainers-mysql = { module = "org.testcontainers:mysql", version.ref = "testcontainers" }
woodstox-core = { module = "com.fasterxml.woodstox:woodstox-core", version.ref = "woodstox" }
xerces = { module = "xerces:xercesImpl", version.ref = "xerces" }

[bundles]
interop-kafka-events = [
    "event-interop-resource-internal",
    "event-interop-resource-request",
]
jackson = [
    "jackson-annotations",
    "jackson-core",
    "jackson-databind",
    "jackson-dataformat-xml",
    "jackson-dataformat-yaml",
    "jackson-datatype-jsr310",
    "jackson-module-kotlin",
]
ktor = [
    "ktor-client-auth",
    "ktor-client-cio",
    "ktor-client-content-negotiation",
    "ktor-client-core",
    "ktor-client-logging",
    "ktor-serialization-jackson",
]
test-mysql = [
    "mysql-connector-java",
    "testcontainers-mysql",
]

[plugins]
dependencycheck = { id = "org.owasp.dependencycheck", version.ref = "owasp" }
# @keep Used by buildSrc
interop-base = { id = "com.projectronin.interop.gradle.base", version.ref = "interop-gradle" }
interop-integration = { id = "com.projectronin.interop.gradle.integration", version.ref = "interop-gradle" }
interop-junit = { id = "com.projectronin.interop.gradle.junit", version.ref = "interop-gradle" }
interop-publish = { id = "com.projectronin.interop.gradle.publish", version.ref = "interop-gradle" }
interop-spring = { id = "com.projectronin.interop.gradle.spring", version.ref = "interop-gradle" }
interop-version = { id = "com.projectronin.interop.gradle.version", version.ref = "interop-gradle" }
interop-version-catalog = { id = "com.projectronin.interop.gradle.version-catalog-update", version.ref = "interop-gradle" }
shadow = { id = "com.github.johnrengelman.shadow", version.ref = "shadow" }
