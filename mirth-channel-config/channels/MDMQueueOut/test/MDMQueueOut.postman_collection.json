{
	"info": {
		"_postman_id": "b95492eb-6270-46c0-9f59-24838a61873c",
		"name": "MDMQueueOut",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19039668"
	},
	"item": [
		{
			"name": "0 Channel Ready",
			"item": [
				{
					"name": "Test: Channel is in Mirth",
					"item": [
						{
							"name": "0 Test: Get Channel ID from Mirth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var tenant = pm.environment.get(\"tenant_mnemonic\");",
											"var channelName = pm.environment.get(\"channel_name\");",
											"var configuredChannelName = tenant + \"-\" + channelName;",
											"console.log(configuredChannelName)",
											"var jsonData = pm.response.json();",
											"var channels = jsonData.list.channel;",
											"var found = false;",
											"if (Array.isArray(channels)) {",
											"    for (var i = 0; !found && (i < jsonData.list.channel.length); i++) {",
											"        var channel = jsonData.list.channel[i];",
											"        if (channel.name == configuredChannelName) {",
											"            pm.environment.set(\"channel_id\", channel.id.substring(tenant.length + 1));",
											"            found = true;",
											"        }",
											"    }",
											"}",
											"else {",
											"    if (jsonData.list.channel.name == configuredChannelName) {",
											"        pm.environment.set(\"channel_id\", channel.id.substring(tenant.length + 1));",
											"    }",
											"}",
											"if (!found) {",
											"    console.log(\"The channel to test is not in Mirth: \" + configuredChannelName);",
											"    console.log(\"Remaining tests in this collection should fail.\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mirth_url}}/channels",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean: Channel is in a Good State and Stopped",
					"item": [
						{
							"name": "0 Setup: Deploy Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mirth_url}}/channels/{{tenant_mnemonic}}-{{channel_id}}/_deploy",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"{{tenant_mnemonic}}-{{channel_id}}",
										"_deploy"
									]
								}
							},
							"response": []
						},
						{
							"name": "0 Setup: Stop Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channelId",
											"value": "{{tenant_mnemonic}}-{{channel_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{mirth_url}}/channels/_stop",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"_stop"
									]
								}
							},
							"response": []
						},
						{
							"name": "0 Setup: Channel is Safely Stopped",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"channel is stopped\", function () {",
											"    pm.expect(jsonData.dashboardStatus.state).to.eql(\"STOPPED\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mirth_url}}/channels/{{tenant_mnemonic}}-{{channel_id}}/status",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"{{tenant_mnemonic}}-{{channel_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "0 Setup: Enable Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mirth_url}}/channels/{{tenant_mnemonic}}-{{channel_id}}/enabled/true",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"{{tenant_mnemonic}}-{{channel_id}}",
										"enabled",
										"true"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test: Channel Definition",
					"item": [
						{
							"name": "0 Test: Channel Definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var tenant = pm.environment.get(\"tenant_mnemonic\");",
											"var channelName = pm.environment.get(\"channel_name\");",
											"pm.test(\"name = \" + tenant + \"-\" +channelName, function () {",
											"    pm.expect(jsonData.channel.name).to.eql(tenant + \"-\" + channelName);",
											"});",
											"",
											"var channelId = pm.environment.get(\"channel_id\");",
											"pm.test(\"id = \" + tenant + \"-\" +channelId, function () {",
											"    pm.expect(jsonData.channel.id).to.eql(tenant + \"-\" + channelId);",
											"});",
											"",
											"pm.test(\"channel polls on start\", function () {",
											"   pm.expect(jsonData.channel.sourceConnector.properties.pollConnectorProperties.pollOnStart).to.eql(true);",
											"});",
											"",
											"var entry = jsonData.channel.properties.resourceIds.entry;",
											"if (Array.isArray(entry)) {",
											"    pm.test(\"channel has the Interop resource configured\", function () {",
											"        pm.expect(entry[0].string[1]).to.eql(\"Interop\");",
											"    });",
											"}",
											"else {",
											"    pm.test(\"channel has the Interop resource configured\", function () {",
											"        pm.expect(entry.string[1]).to.eql(\"Interop\");  ",
											"    });",
											"}",
											"",
											"pm.test(\"sourceConnector is JavaScript\", function () {",
											"   pm.expect(jsonData.channel.sourceConnector.properties[\"@class\"]).to.eql(\"com.mirth.connect.connectors.js.JavaScriptReceiverProperties\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mirth_url}}/channels/{{tenant_mnemonic}}-{{channel_id}}",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"{{tenant_mnemonic}}-{{channel_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "1 Backup and Delete Tenant Data",
			"item": [
				{
					"name": "1 Setup: Aidbox Backup Tenant Practitioners",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var practitioners = [];",
									"var jsonData = pm.response.json();",
									"var entries = jsonData.total;",
									"for (i in jsonData.entry) {",
									"    practitioners.push(jsonData.entry[i]);",
									"}",
									"pm.environment.set(\"practitioners_original\", practitioners);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{devbox_client_pass}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{devbox_client}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{devbox_url}}/fhir/Practitioner?_ilike={{tenant_mnemonic}}-",
							"host": [
								"{{devbox_url}}"
							],
							"path": [
								"fhir",
								"Practitioner"
							],
							"query": [
								{
									"key": "_ilike",
									"value": "{{tenant_mnemonic}}-"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1 Setup: Aidbox Delete Tenant Practitioners",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var entries = jsonData.total;",
									"pm.test(\"delete leaves 0 Practitioners (actually \" + entries + \")\", function () {",
									"    pm.expect(entries).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var devboxUrl = pm.environment.get(\"devbox_url\");",
									"var practitioners = pm.environment.get(\"practitioners_original\");",
									"for (i in practitioners) {",
									"    pm.sendRequest(",
									"        {",
									"            url: devboxUrl + \"/fhir/Practitioner/\" + practitioners[i].resource.id,",
									"            method: 'DELETE',",
									"            header: { // Y2xpZW50OnNlY3JldA== is a base-64 hash of {{devbox_client}}:{{devbox_client_pass}}",
									"                'Authorization': 'Basic Y2xpZW50OnNlY3JldA=='",
									"            }",
									"        }, function (err, response) {            ",
									"    });",
									"}",
									"",
									"var entries = practitioners.length;",
									"pm.test(\"deleting \" + entries + \" Practitioners\", function () {",
									"    true",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{devbox_client_pass}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{devbox_client}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{devbox_url}}/fhir/Practitioner?_ilike={{tenant_mnemonic}}-",
							"host": [
								"{{devbox_url}}"
							],
							"path": [
								"fhir",
								"Practitioner"
							],
							"query": [
								{
									"key": "_ilike",
									"value": "{{tenant_mnemonic}}-"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1 Setup: Aidbox Backup Tenant Patients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var patients = [];",
									"var jsonData = pm.response.json();",
									"var entries = jsonData.total;",
									"for (i in jsonData.entry) {",
									"    patients.push(jsonData.entry[i]);",
									"}",
									"pm.environment.set(\"patients_original\", patients);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{devbox_client_pass}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{devbox_client}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{devbox_url}}/fhir/Patient?_ilike={{tenant_mnemonic}}-",
							"host": [
								"{{devbox_url}}"
							],
							"path": [
								"fhir",
								"Patient"
							],
							"query": [
								{
									"key": "_ilike",
									"value": "{{tenant_mnemonic}}-"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1 Setup: Aidbox Delete Tenant Patients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var entries = jsonData.total;",
									"pm.test(\"delete leaves 0 Patients (actually \" + entries + \")\", function () {",
									"    pm.expect(entries).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var devboxUrl = pm.environment.get(\"devbox_url\");",
									"var patients = pm.environment.get(\"patients_original\");",
									"for (i in patients) {",
									"    pm.sendRequest(",
									"        {",
									"            url: devboxUrl + \"/fhir/Patient/\" + patients[i].resource.id,",
									"            method: 'DELETE',",
									"            header: { // Y2xpZW50OnNlY3JldA== is a base-64 hash of {{devbox_client}}:{{devbox_client_pass}}",
									"                'Authorization': 'Basic Y2xpZW50OnNlY3JldA=='",
									"            }",
									"        }, function (err, response) {            ",
									"    });",
									"}",
									"",
									"var entries = patients.length;",
									"pm.test(\"deleting \" + entries + \" Patients\", function () {",
									"    true",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{devbox_client_pass}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{devbox_client}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{devbox_url}}/fhir/Patient?_ilike={{tenant_mnemonic}}-",
							"host": [
								"{{devbox_url}}"
							],
							"path": [
								"fhir",
								"Patient"
							],
							"query": [
								{
									"key": "_ilike",
									"value": "{{tenant_mnemonic}}-"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2 Channel Processes New Note from Queue",
			"item": [
				{
					"name": "Add Test Data",
					"item": [
						{
							"name": "2 Setup: Ensure Test Practitioner Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 (or resource already exists)\", function () {",
											"    pm.expect(pm.response.status).to.be.oneOf([\"Created\", \"Conflict\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{devbox_client_pass}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{devbox_client}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": [\n        {\n        \"given\": [\n            \"MDMPract\"\n        ],\n        \"family\": \"Test\"\n        }\n    ],\n    \"identifier\": [\n        {\n        \"type\": {\n            \"text\": \"Tenant ID\",\n            \"coding\": [\n            {\n                \"code\": \"TID\",\n                \"system\": \"http://projectronin.com/id/tenantId\",\n                \"display\": \"Ronin-specified Tenant Identifier\"\n            }\n            ]\n        },\n        \"value\": \"ronin\",\n        \"system\": \"http://projectronin.com/id/tenantId\"\n        },\n        {\n        \"type\": {\n            \"text\": \"FHIR STU3\",\n            \"coding\": [\n            {\n                \"code\": \"STU3\",\n                \"system\": \"http://projectronin.com/id/fhir\",\n                \"display\": \"FHIR STU3 ID\"\n            }\n            ]\n        },\n        \"value\": \"MDMQueueTestPractitioner\",\n        \"system\": \"http://projectronin.com/id/fhir\"\n        },\n        {\n        \"use\": \"usual\",\n        \"type\": {\n            \"text\": \"EXTERNAL\"\n        },\n        \"value\": \"external-value\",\n        \"system\": \"external-system\"\n        },\n        {\n        \"use\": \"usual\",\n        \"type\": {\n            \"text\": \"INTERNAL\"\n        },\n        \"value\": \"internal-value\",\n        \"system\": \"internal-system\"\n        }\n    ],\n    \"id\": \"ronin-MDMQueueTestPractitioner\",\n    \"resourceType\": \"Practitioner\",\n    \"meta\": {\n        \"lastUpdated\": \"2022-07-20T23:19:15.557022Z\",\n        \"createdAt\": \"2022-07-20T21:57:46.584450Z\",\n        \"versionId\": \"589\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{devbox_url}}/fhir/Practitioner",
									"host": [
										"{{devbox_url}}"
									],
									"path": [
										"fhir",
										"Practitioner"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 Setup: Ensure Test Patient Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 (or resource already exists)\", function () {",
											"    pm.expect(pm.response.status).to.be.oneOf([\"Created\", \"Conflict\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{devbox_client_pass}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{devbox_client}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": [\n        {\n        \"given\": [\n            \"MDM\"\n        ],\n        \"family\": \"Test\"\n        }\n    ],\n    \"birthDate\": \"1973-07-21\",\n    \"resourceType\": \"Patient\",\n    \"id\": \"ronin-MDMQueueTestPatient\",\n    \"identifier\": [\n        {\n        \"type\": {\n            \"text\": \"Tenant ID\",\n            \"coding\": [\n            {\n                \"code\": \"TID\",\n                \"system\": \"http://projectronin.com/id/tenantId\",\n                \"display\": \"Ronin-specified Tenant Identifier\"\n            }\n            ]\n        },\n        \"value\": \"ronin\",\n        \"system\": \"http://projectronin.com/id/tenantId\"\n        },\n        {\n        \"type\": {\n            \"text\": \"MRN\",\n            \"coding\": [\n            {\n                \"code\": \"MR\",\n                \"system\": \"http://projectronin.com/id/mrn\",\n                \"display\": \"Medical Record Number\"\n            }\n            ]\n        },\n        \"value\": \"MDMQueueTestPatient\",\n        \"system\": \"http://projectronin.com/id/mrn\"\n        },\n        {\n        \"type\": {\n            \"text\": \"FHIR STU3\",\n            \"coding\": [\n            {\n                \"code\": \"STU3\",\n                \"system\": \"http://projectronin.com/id/fhir\",\n                \"display\": \"FHIR STU3 ID\"\n            }\n            ]\n        },\n        \"value\": \"MDMQueueTestPatient\",\n        \"system\": \"http://projectronin.com/id/fhir\"\n        }\n    ],\n    \"telecom\": [\n        {\n        \"use\": \"work\",\n        \"value\": \"jane.doe@projectronin.com\",\n        \"system\": \"email\"\n        }\n    ],\n    \"gender\": \"female\",\n    \"maritalStatus\": {\n        \"text\": \"Married\",\n        \"coding\": [\n        {\n            \"code\": \"M\",\n            \"system\": \"http://terminology.hl7.org/CodeSystem/v3-MaritalStatus\"\n        }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{devbox_url}}/fhir/Patient",
									"host": [
										"{{devbox_url}}"
									],
									"path": [
										"fhir",
										"Patient"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Setup Mirth",
					"item": [
						{
							"name": "2 Setup: Message Does Not Exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"message does not exist\", function() {",
											"   pm.expect(jsonData.list).to.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{mirth_url}}/channels/{{tenant_mnemonic}}-{{channel_id}}/messages?includeContent=false&offset=0&limit=20&status=SENT&rawContentSearch={{random_string}}",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"{{tenant_mnemonic}}-{{channel_id}}",
										"messages"
									],
									"query": [
										{
											"key": "includeContent",
											"value": "false"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "status",
											"value": "SENT"
										},
										{
											"key": "rawContentSearch",
											"value": "{{random_string}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 Setup: Deploy Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mirth_url}}/channels/{{channel_id}}/_deploy",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"{{channel_id}}",
										"_deploy"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 Setup: Stop Channel, Adjust Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"var uuid = require('uuid');",
											"pm.environment.set('random_string', uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channelId",
											"value": "{{tenant_mnemonic}}-{{channel_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{mirth_url}}/channels/_stop",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"_stop"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Send Note",
					"item": [
						{
							"name": "2 Setup: New Note Sent and Queued",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"No errors\", function() {",
											"    pm.expect(jsonData.errors).to.be.undefined;",
											"});",
											"pm.test(\"Data was sent\", function() {",
											"    pm.expect(jsonData.data).to.not.null;",
											"});",
											"pm.test(\"Data sent was a note\", function() {",
											"   pm.expect(jsonData.data.sendNote).to.not.null;",
											"});",
											"pm.test(\"Data sent was a RoninNote\", function() {",
											"    pm.expect(jsonData.data.sendNote.substring(0, 9)).to.eql(\"RoninNote\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{seki_auth_ronin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation sendNote($noteInput: NoteInput!, $tenantId: String!) \n{\n    sendNote(noteInput: $noteInput, tenantId: $tenantId)\n}",
										"variables": "{\n    \"noteInput\": {\n        \"datetime\": \"202206011250\", \n        \"patientId\": \"ronin-MDMQueueTestPatient\",\n        \"patientIdType\": \"FHIR\",\n        \"practitionerFhirId\": \"ronin-MDMQueueTestPractitioner\", \n        \"noteText\": \"{{random_string}}\",\n        \"isAlert\" : false,\n        \"noteSender\" : \"PRACTITIONER\"\n        },\n    \"tenantId\": \"{{tenant_mnemonic}}\"\n}"
									}
								},
								"url": {
									"raw": "{{proxy_url}}/graphql",
									"host": [
										"{{proxy_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 Setup: Start Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channelId",
											"value": "{{tenant_mnemonic}}-{{channel_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{mirth_url}}/channels/_start",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"_start"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 Setup: (After a Pause) Channel Starts, Polls",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"channel is started\", function () {",
											"    pm.expect(jsonData.dashboardStatus.state).to.eql(\"STARTED\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"during a collection run, pause to ensure final result\", function () {",
											"setTimeout(function () {}, 15000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mirth_url}}/channels/{{tenant_mnemonic}}-{{channel_id}}/status",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"{{tenant_mnemonic}}-{{channel_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 Test: (After a Pause) Make Sure Message Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"messageExists\", function() {",
											"    var message = jsonData.list.message;",
											"    pm.expect(message.messageId).to.not.null;",
											"    pm.expect(message.messageId).to.not.undefined;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 15000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{mirth_url}}/channels/{{tenant_mnemonic}}-{{channel_id}}/messages?includeContent=false&offset=0&limit=20&status=SENT&rawContentSearch={{random_string}}",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"{{tenant_mnemonic}}-{{channel_id}}",
										"messages"
									],
									"query": [
										{
											"key": "includeContent",
											"value": "false"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "status",
											"value": "SENT"
										},
										{
											"key": "rawContentSearch",
											"value": "{{random_string}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "3 Return to Original State",
			"item": [
				{
					"name": "Stop Channel",
					"item": [
						{
							"name": "3 After: Stop Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channelId",
											"value": "{{tenant_mnemonic}}-{{channel_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{mirth_url}}/channels/_stop",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"_stop"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean: Remove Test Data",
					"item": [
						{
							"name": "3 After: Aidbox Get Test Practitioners",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var practitioners = [];",
											"var jsonData = pm.response.json();",
											"var entries = jsonData.total;",
											"for (i in jsonData.entry) {",
											"    practitioners.push(jsonData.entry[i].resource.id);",
											"}",
											"pm.collectionVariables.set(\"practitioners_to_delete\", practitioners);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{devbox_client_pass}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{devbox_client}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{devbox_url}}/fhir/Practitioner?_ilike={{tenant_mnemonic}}-",
									"host": [
										"{{devbox_url}}"
									],
									"path": [
										"fhir",
										"Practitioner"
									],
									"query": [
										{
											"key": "_ilike",
											"value": "{{tenant_mnemonic}}-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3 After: Aidbox Delete Tenant Practitioners",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var entries = jsonData.total;",
											"pm.test(\"delete leaves 0 Practitioners (actually \" + entries + \")\", function () {",
											"    pm.expect(entries).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var devboxUrl = pm.environment.get(\"devbox_url\");",
											"var practitioners = pm.collectionVariables.get(\"practitioners_to_delete\");",
											"var deleted = 0",
											"for (i in practitioners) {",
											"    pm.sendRequest(",
											"        {",
											"            url: devboxUrl + \"/fhir/Practitioner/\" + practitioners[i],",
											"            method: 'DELETE',",
											"            header: { // Y2xpZW50OnNlY3JldA== is a base-64 hash of {{devbox_client}}:{{devbox_client_pass}}",
											"                'Authorization': 'Basic Y2xpZW50OnNlY3JldA=='",
											"            }",
											"        }, function (err, response) {            ",
											"    });",
											"    deleted++",
											"}",
											"",
											"pm.test(\"deleting \" + deleted + \" Practitioner(s)\", function () {",
											"    true",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{devbox_client_pass}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{devbox_client}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{devbox_url}}/fhir/Practitioner?_ilike={{tenant_mnemonic}}-",
									"host": [
										"{{devbox_url}}"
									],
									"path": [
										"fhir",
										"Practitioner"
									],
									"query": [
										{
											"key": "_ilike",
											"value": "{{tenant_mnemonic}}-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3 After: Remove Test Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{mirth_url}}/channels/{{tenant_mnemonic}}-{{channel_id}}/messages?includeContent=false&offset=0&limit=20&status=SENT&rawContentSearch={{random_string}}",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"{{tenant_mnemonic}}-{{channel_id}}",
										"messages"
									],
									"query": [
										{
											"key": "includeContent",
											"value": "false"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "status",
											"value": "SENT"
										},
										{
											"key": "rawContentSearch",
											"value": "{{random_string}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean: Aidbox Restore Original Data Copy",
					"item": [
						{
							"name": "3 Setup: Aidbox Restore Tenant Practitioners",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var devboxUrl = pm.environment.get(\"devbox_url\");",
											"var practitioners = pm.environment.get(\"practitioners_original\");",
											"for (i in practitioners) {",
											"    pm.sendRequest(",
											"        {",
											"            url: devboxUrl + \"/fhir/Practitioner/\" + practitioners[i].resource.id,",
											"            method: 'POST',",
											"            header: { // Y2xpZW50OnNlY3JldA== is a base-64 hash of {{devbox_client}}:{{devbox_client_pass}}",
											"                'Authorization': 'Basic Y2xpZW50OnNlY3JldA=='",
											"            },",
											"            body: practitioners[i]",
											"        }, function (err, response) {            ",
											"    });",
											"}",
											"",
											"pm.test(\"Restoring \" + practitioners.length + \" Practitioner(s)\", function () {",
											"    true",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{devbox_client_pass}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{devbox_client}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{devbox_url}}/fhir/Practitioner?_ilike={{tenant_mnemonic}}-",
									"host": [
										"{{devbox_url}}"
									],
									"path": [
										"fhir",
										"Practitioner"
									],
									"query": [
										{
											"key": "_ilike",
											"value": "{{tenant_mnemonic}}-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3 Setup: Aidbox Restore Tenant Patients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var devboxUrl = pm.environment.get(\"devbox_url\");",
											"var patients = pm.environment.get(\"patients_original\");",
											"for (i in patients) {",
											"    pm.sendRequest(",
											"        {",
											"            url: devboxUrl + \"/fhir/Patient/\" + patients[i].resource.id,",
											"            method: 'POST',",
											"            header: { // Y2xpZW50OnNlY3JldA== is a base-64 hash of {{devbox_client}}:{{devbox_client_pass}}",
											"                'Authorization': 'Basic Y2xpZW50OnNlY3JldA=='",
											"            },",
											"            body: patients[i]",
											"        }, function (err, response) {            ",
											"    });",
											"}",
											"",
											"pm.test(\"Restoring \" + patients.length + \" Patient(s)\", function () {",
											"    true",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{devbox_client_pass}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{devbox_client}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{devbox_url}}/fhir/Patient?_ilike={{tenant_mnemonic}}-",
									"host": [
										"{{devbox_url}}"
									],
									"path": [
										"fhir",
										"Patient"
									],
									"query": [
										{
											"key": "_ilike",
											"value": "{{tenant_mnemonic}}-"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{mirth_pass}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{mirth_user}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "mirth_channel_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "practitioners_to_delete",
			"value": ""
		}
	]
}