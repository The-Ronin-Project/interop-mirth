{
	"info": {
		"_postman_id": "611c388a-9970-4ad7-b248-dfeec67e57d3",
		"name": "PatientQueue",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18428610"
	},
	"item": [
		{
			"name": "0 Channel Ready",
			"item": [
				{
					"name": "Test: Channel is in Mirth",
					"item": [
						{
							"name": "0 Test: Get Channel ID from Mirth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var tenant = pm.environment.get(\"tenant_mnemonic\");",
											"var channelName = pm.environment.get(\"channel_name\");",
											"var configuredChannelName = tenant + \"-\" + channelName;",
											"",
											"var jsonData = pm.response.json();",
											"var channels = jsonData.list.channel;",
											"var found = false;",
											"if (Array.isArray(channels)) {",
											"    for (var i = 0; !found && (i < jsonData.list.channel.length); i++) {",
											"        var channel = jsonData.list.channel[i];",
											"        if (channel.name == configuredChannelName) {",
											"            pm.environment.set(\"channel_id\", channel.id.substring(tenant.length + 1));",
											"            found = true;",
											"        }",
											"    }",
											"}",
											"else {",
											"    if (jsonData.list.channel.name == configuredChannelName) {",
											"        pm.environment.set(\"channel_id\", channel.id.substring(tenant.length + 1));",
											"    }",
											"}",
											"if (!found) {",
											"    console.log(\"The channel to test is not in Mirth: \" + configuredChannelName);",
											"    console.log(\"Remaining tests in this collection should fail.\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mirth_url}}/channels",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clean: Channel is in a Good State and Stopped",
					"item": [
						{
							"name": "0 Setup: Deploy Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mirth_url}}/channels/{{tenant_mnemonic}}-{{channel_id}}/_deploy",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"{{tenant_mnemonic}}-{{channel_id}}",
										"_deploy"
									]
								}
							},
							"response": []
						},
						{
							"name": "0 Setup: Stop Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channelId",
											"value": "{{tenant_mnemonic}}-{{channel_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{mirth_url}}/channels/_stop",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"_stop"
									]
								}
							},
							"response": []
						},
						{
							"name": "0 Setup: Channel is Safely Stopped",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"channel is stopped\", function () {",
											"    pm.expect(jsonData.dashboardStatus.state).to.eql(\"STOPPED\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mirth_url}}/channels/{{tenant_mnemonic}}-{{channel_id}}/status",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"{{tenant_mnemonic}}-{{channel_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "0 Setup: Enable Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mirth_url}}/channels/{{tenant_mnemonic}}-{{channel_id}}/enabled/true",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"{{tenant_mnemonic}}-{{channel_id}}",
										"enabled",
										"true"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test: Channel Definition",
					"item": [
						{
							"name": "0 Test: Channel Definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var tenant = pm.environment.get(\"tenant_mnemonic\");",
											"var channelName = pm.environment.get(\"channel_name\");",
											"pm.test(\"name = \" + tenant + \"-\" +channelName, function () {",
											"    pm.expect(jsonData.channel.name).to.eql(tenant + \"-\" + channelName);",
											"});",
											"",
											"var channelId = pm.environment.get(\"channel_id\");",
											"pm.test(\"id = \" + tenant + \"-\" +channelId, function () {",
											"    pm.expect(jsonData.channel.id).to.eql(tenant + \"-\" + channelId);",
											"});",
											"",
											"pm.test(\"channel polls on start\", function () {",
											"   pm.expect(jsonData.channel.sourceConnector.properties.pollConnectorProperties.pollOnStart).to.eql(true);",
											"});",
											"",
											"var entry = jsonData.channel.properties.resourceIds.entry;",
											"if (Array.isArray(entry)) {",
											"    pm.test(\"channel has the Interop resource configured\", function () {",
											"        pm.expect(entry[0].string[1]).to.eql(\"Interop\");",
											"    });",
											"}",
											"else {",
											"    pm.test(\"channel has the Interop resource configured\", function () {",
											"        pm.expect(entry.string[1]).to.eql(\"Interop\");  ",
											"    });",
											"}",
											"",
											"pm.test(\"sourceConnector is JavaScript\", function () {",
											"   pm.expect(jsonData.channel.sourceConnector.properties[\"@class\"]).to.eql(\"com.mirth.connect.connectors.js.JavaScriptReceiverProperties\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mirth_url}}/channels/{{tenant_mnemonic}}-{{channel_id}}",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"{{tenant_mnemonic}}-{{channel_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "1 Channel Processes New Patient from Queue",
			"item": [
				{
					"name": "Setup: Backup and Delete Tenant Data",
					"item": [
						{
							"name": "1 Setup: Aidbox Backup Tenant Patients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var patients = [];",
											"var jsonData = pm.response.json();",
											"var entries = jsonData.total;",
											"for (i in jsonData.entry) {",
											"    patients.push(jsonData.entry[i]);",
											"}",
											"pm.environment.set(\"patients_original\", patients);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{devbox_client_pass}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{devbox_client}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{devbox_url}}/fhir/Patient?_ilike={{tenant_mnemonic}}-",
									"host": [
										"{{devbox_url}}"
									],
									"path": [
										"fhir",
										"Patient"
									],
									"query": [
										{
											"key": "_ilike",
											"value": "{{tenant_mnemonic}}-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1 Setup: Aidbox Delete Tenant Patients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var entries = jsonData.total;",
											"pm.test(\"delete leaves 0 Patients (actually \" + entries + \")\", function () {",
											"    pm.expect(entries).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var devboxUrl = pm.environment.get(\"devbox_url\");",
											"var patients = pm.environment.get(\"patients_original\");",
											"for (i in patients) {",
											"    pm.sendRequest(",
											"        {",
											"            url: devboxUrl + \"/fhir/Patient/\" + patients[i].resource.id,",
											"            method: 'DELETE',",
											"            header: { // Y2xpZW50OnNlY3JldA== is a base-64 hash of {{devbox_client}}:{{devbox_client_pass}}",
											"                'Authorization': 'Basic Y2xpZW50OnNlY3JldA=='",
											"            }",
											"        }, function (err, response) {            ",
											"    });",
											"}",
											"",
											"var entries = patients.length;",
											"pm.test(\"deleting \" + entries + \" Patients\", function () {",
											"    true",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{devbox_client_pass}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{devbox_client}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{devbox_url}}/fhir/Patient?_ilike={{tenant_mnemonic}}-",
									"host": [
										"{{devbox_url}}"
									],
									"path": [
										"fhir",
										"Patient"
									],
									"query": [
										{
											"key": "_ilike",
											"value": "{{tenant_mnemonic}}-"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Test: Add Patient",
					"item": [
						{
							"name": "1 Setup: Deploy Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mirth_url}}/channels/{{mirth_channel_id}}/_deploy",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"{{mirth_channel_id}}",
										"_deploy"
									]
								}
							},
							"response": []
						},
						{
							"name": "1 Setup: Stop Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channelId",
											"value": "{{tenant_mnemonic}}-{{channel_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{mirth_url}}/channels/_stop",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"_stop"
									]
								}
							},
							"response": []
						},
						{
							"name": "1 Setup: New Patient Retrieved and Queued",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var patientCount = (jsonData.data && jsonData.data.patientsByNameAndDOB) ? jsonData.data.patientsByNameAndDOB.length : 0;",
											"pm.test(patientCount + \" Patient(s) queued\", function () {",
											"    pm.expect(patientCount).to.be.gt(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{seki_auth_ronin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($tenantId: String!, $family: String!, $given: String!, $birthDate: String!) {\n  patientsByNameAndDOB(\n      tenantId: $tenantId, \n        family: $family, \n        given: $given, \n        birthdate: $birthDate\n    ) {\n    name{\n        given\n        family\n    }\n    birthDate\n    gender\n    address{\n        use\n        line\n        city\n    }\n    identifier{\n        system\n        value\n    }\n  }\n}",
										"variables": "{\n    \"tenantId\": \"ronin\",\n    \"family\": \"Mychart\",\n    \"given\": \"Allison\",\n    \"birthDate\": \"1987-01-15\"\n}"
									}
								},
								"url": {
									"raw": "{{proxy_url}}/graphql",
									"host": [
										"{{proxy_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "1 Test: Start Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channelId",
											"value": "{{tenant_mnemonic}}-{{channel_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{mirth_url}}/channels/_start",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"_start"
									]
								}
							},
							"response": []
						},
						{
							"name": "1 Test: (After a Pause) Aidbox: +1 Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var requestTotal = pm.response.json() ? pm.response.json().total : 0;",
											"pm.test(requestTotal + \" Patient\", function () {    ",
											"    pm.expect(requestTotal).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"during a collection run, pause to ensure final result\", function () {",
											"    setTimeout(function () {}, 15000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{devbox_client_pass}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{devbox_client}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{devbox_url}}/fhir/Patient?_ilike={{tenant_mnemonic}}-",
									"host": [
										"{{devbox_url}}"
									],
									"path": [
										"fhir",
										"Patient"
									],
									"query": [
										{
											"key": "_ilike",
											"value": "{{tenant_mnemonic}}-"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "2 Return to Original State",
			"item": [
				{
					"name": "Restore Tenant Data",
					"item": [
						{
							"name": "2 Clean: Aidbox Remove Test Patients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var patients = [];",
											"var jsonData = pm.response.json();",
											"var entries = jsonData.total;",
											"for (i in jsonData.entry) {",
											"    patients.push(jsonData.entry[i].resource.id);",
											"}",
											"",
											"var devboxUrl = pm.environment.get(\"devbox_url\");",
											"for (j in patients) {",
											"    pm.sendRequest(",
											"        {",
											"            url: devboxUrl + \"/fhir/Patient/\" + patients[j],",
											"            method: 'DELETE',",
											"            header: { // Y2xpZW50OnNlY3JldA== is a base-64 hash of {{devbox_client}}:{{devbox_client_pass}}",
											"                'Authorization': 'Basic Y2xpZW50OnNlY3JldA=='",
											"            }",
											"        }, function (err, response) {            ",
											"    });",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"}",
											"",
											"pm.test(\"deleted \" + entries + \" patients\", function () {",
											"    true",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{devbox_client_pass}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{devbox_client}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{devbox_url}}/fhir/Patient?identifier=http%3A%2F%2Fprojectronin.com%2Fid%2FtenantId|{{tenant_mnemonic}}",
									"host": [
										"{{devbox_url}}"
									],
									"path": [
										"fhir",
										"Patient"
									],
									"query": [
										{
											"key": "identifier",
											"value": "http%3A%2F%2Fprojectronin.com%2Fid%2FtenantId|{{tenant_mnemonic}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 Clean: Aidbox Restore Tenant Patients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var devboxUrl = pm.environment.get(\"devbox_url\");",
											"var patients = pm.environment.get(\"patients_original\");",
											"for (i in patients) {",
											"    pm.sendRequest(",
											"        {",
											"            url: devboxUrl + \"/fhir/Patient/\" + patients[i].resource.id,",
											"            method: 'POST',",
											"            header: { // Y2xpZW50OnNlY3JldA== is a base-64 hash of {{devbox_client}}:{{devbox_client_pass}}",
											"                'Authorization': 'Basic Y2xpZW50OnNlY3JldA=='",
											"            },",
											"            body: patients[i]",
											"        }, function (err, response) {            ",
											"    });",
											"}",
											"",
											"pm.test(\"Restoring \" + patients.length + \" Patients(s)\", function () {",
											"    true",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{devbox_client_pass}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{devbox_client}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{devbox_url}}/fhir/Patient?_ilike={{tenant_mnemonic}}-",
									"host": [
										"{{devbox_url}}"
									],
									"path": [
										"fhir",
										"Patient"
									],
									"query": [
										{
											"key": "_ilike",
											"value": "{{tenant_mnemonic}}-"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Stop Channel",
					"item": [
						{
							"name": "2 After: Stop Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "OpenAPI",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channelId",
											"value": "{{tenant_mnemonic}}-{{channel_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{mirth_url}}/channels/_stop",
									"host": [
										"{{mirth_url}}"
									],
									"path": [
										"channels",
										"_stop"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{mirth_pass}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{mirth_user}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "mirth_channel_id",
			"value": "ronin-d90aa9f3-b609-4067-b715-9a0b34",
			"type": "string"
		}
	]
}